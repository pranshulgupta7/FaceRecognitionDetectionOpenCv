# -*- coding: utf-8 -*-
"""Face_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tdkRiF0SFaTd8EmkQRZ2LP6GheBt2uZi
"""

# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12-JdFrRXRXhHTHaRvOYnN9xhX5HXGw3a
"""

import numpy as np
import pandas as pd
import cv2

#Instantiate a camera object to capture images
cam = cv2.VideoCapture(0)

# Create a haar-cascade object for face detection
# !wget https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalface_default.xml -P drive/gaze
# cascades_path = 'drive/gaze/'

face_cas = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# create a placeholder for storing the data
data = []
ix = 0 # current frame number

while True:
  # retrieve the ret (boolean) and farme from camera
  ret, frame = cam.read()

  # if the camera is working fine,  we proceed to extract the face
  if ret == True:

    #convert the current frame to grayscale
    gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)

    # apply the haar cascade to detect faces in the current frame
    # the other parameters 1.3 and 5 are fine tuning parameters
    # for the haar cascade object
    faces = face_cas.detectMultiScale(gray, 1.3, 5)

    # for each face object we get, we have
    # the corner coordinates(x,y) and the width and height of the face
    for(x, y, w, h) in faces:

      # get the face component from the image frame
      face_component = frame[y:y+h, x:x+w, :]

      # resize the face image to 50X50X3
      fc = cv2.resize(face_component, (50,50))

      # store the face data after every 10 frames
      # only if the number of entries is less than 20
      if ix%10 == 0 and len(data) < 20:
        data.append(fc)
      
      # for visualization,  draw a rectangle around the face
      # in the image
      cv2.rectangle(frame, (x,y), (x+w, y+w), (0, 255, 0), 2)
    
    ix += 1 # increment the current frame number
    cv2.imshow('frame',frame) # display the frame

    # if the process the escape key (ID: 27)
    # or the number of images hits 20, we stop
    # recording
    if cv2.waitKey(1) == 27  or len(data) >= 20:
      break
  else:
    # If the camera is not working, print "Error"
    print("Error")

# now destroy the windows we created
cv2.destroyAllWindows()

# convert the data to a numpy format
data = np.asarray(data)

# print the shape as a sanity-check
print(data.shape)

# save the data as a numpy matrix in a encode format
np.save('face_01',data)


# We'll run the script for different people and store
# the data into multiple files